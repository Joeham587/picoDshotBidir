// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------------- //
// dshot_bidir_300 //
// --------------- //

#define dshot_bidir_300_wrap_target 0
#define dshot_bidir_300_wrap 18

#define dshot_bidir_300_BIT_PERIOD 40

static const uint16_t dshot_bidir_300_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0xa027, //  1: mov    x, osr                     
    0x8080, //  2: pull   noblock                    
    0xa027, //  3: mov    x, osr                     
    0x6050, //  4: out    y, 16                      
    0xe05a, //  5: set    y, 26                      
    0x1e69, //  6: jmp    !y, 9                  [30]
    0x0086, //  7: jmp    y--, 6                     
    0xb642, //  8: nop                           [22]
    0x00eb, //  9: jmp    !osre, 11                  
    0x0002, // 10: jmp    2                          
    0x6041, // 11: out    y, 1                       
    0x0070, // 12: jmp    !y, 16                     
    0xfd01, // 13: set    pins, 1                [29]
    0xe500, // 14: set    pins, 0                [5] 
    0x0009, // 15: jmp    9                          
    0xee01, // 16: set    pins, 1                [14]
    0xf400, // 17: set    pins, 0                [20]
    0x0009, // 18: jmp    9                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program dshot_bidir_300_program = {
    .instructions = dshot_bidir_300_program_instructions,
    .length = 19,
    .origin = -1,
};

static inline pio_sm_config dshot_bidir_300_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + dshot_bidir_300_wrap_target, offset + dshot_bidir_300_wrap);
    return c;
}

static inline void dshot_bidir_300_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = dshot_bidir_300_program_get_default_config(offset);
    sm_config_set_set_pins(&c, pin, 1);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    sm_config_set_out_shift(&c, false, false, 32);
    double clocks_per_us = clock_get_hz(clk_sys) / 1000000;
    // 3.333us per bit for dshot300
    sm_config_set_clkdiv(&c, 3.333 / dshot_bidir_300_BIT_PERIOD * clocks_per_us);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

